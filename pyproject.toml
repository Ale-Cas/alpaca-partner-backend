[build-system]  # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]  # https://python-poetry.org/docs/pyproject/
name = "alpaca-broker"
version = "0.0.0"
description = "Python implementation of the backend for a trading app leveraging Alpaca's Broker API, alpaca-py and FastAPI."
authors = ["Alessio Castrica <castricaalessio@gmail.com>"]
readme = "README.md"
repository = "https://github.com/Ale-Cas/alpaca-broker"

[tool.poetry.dependencies]  # https://python-poetry.org/docs/dependency-specification/
coloredlogs = "^15.0.1"
fastapi = { extras = ["all"], version = "^0.92.0" }
gunicorn = "^20.1.0"
poethepoet = "^0.18.1"
pydantic = {extras = ["dotenv"], version = "^1.10.7"}
python = "^3.10.5"
streamlit = "^1.19.0"
uvicorn = { extras = ["standard"], version = "^0.20.0" }
alpaca-py = "^0.8.2"
pymongo = "^4.3.3"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = "^1.7.4"
jwt = "^1.3.1"
bcrypt = "^4.0.1"
pip = "^23.1.2"

[tool.poetry.group.test.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
absolufy-imports = "^0.3.1"
black = { extras = ["jupyter"], version = "^22.12.0" }
coverage = { extras = ["toml"], version = "^7.2.1" }
mypy = "^1.0.1"
pre-commit = "^3.1.1"
pytest = "^7.2.2"
pytest-clarity = "^1.0.1"
pytest-mock = "^3.10.0"
pytest-xdist = "^3.2.0"
ruff = "^0.0.254"
mongomock = "^4.1.2"

[tool.poetry.group.dev.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
cruft = "^2.12.0"
jupyterlab = "^3.6.1"
pdoc = "^13.0.0"
deptry = "^0.11.0"

[tool.black]  # https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
line-length = 100
target-version = ["py310"]

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
plugins = "pydantic.mypy"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --verbosity=2 --junitxml=reports/pytest.xml"
testpaths = ["tests"]
xfail_strict = true

[tool.ruff]  # https://github.com/charliermarsh/ruff
fix = true
ignore-init-module-imports = true
line-length = 100
select = ["A", "B", "C4", "C90", "D", "DTZ", "E", "F", "I", "ISC", "N", "NPY", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PT", "RET", "RUF", "RSE", "SIM", "TID", "UP", "W", "YTT"]
ignore = ["E501", "PGH001", "PGH002", "PGH003", "RET504", "S101", "B008", "DTZ003", "D401"]
unfixable = ["F401", "F841"]
src = ["src", "tests"]
target-version = "py310"

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.deptry]
ignore_transitive = ["alpaca-broker"]

[tool.poe.tasks]  # https://github.com/nat-n/poethepoet

  [tool.poe.tasks.api]
  help = "Serve a REST API"
  shell = """
    if [ $dev ]
    then {
      uvicorn \
        --host $host \
        --port $port \
        --reload \
        alpaca_broker.api.main:app
    } else {
      gunicorn \
        --access-logfile - \
        --bind $host:$port \
        --graceful-timeout 10 \
        --keep-alive 10 \
        --log-file - \
        --timeout 30 \
        --worker-class uvicorn.workers.UvicornWorker \
        --worker-tmp-dir /dev/shm \
        --workers 2 \
        alpaca_broker.api.main:app
    } fi
    """

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this host (default: 0.0.0.0)"
    name = "host"
    options = ["--host"]
    default = "0.0.0.0"

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"

    [[tool.poe.tasks.api.args]]
    help = "Enable development mode"
    type = "boolean"
    name = "dev"
    options = ["--dev"]

  [tool.poe.tasks.app]
  help = "Serve a Streamlit app"
  cmd = """
    streamlit run
      --browser.gatherUsageStats false
      --server.address $host
      --server.port $port
      --theme.base light
      src/alpaca_broker/frontend/app.py
    """
  use_exec = true

    [[tool.poe.tasks.app.args]]
    help = "Bind socket to this host (default: 0.0.0.0)"
    name = "host"
    options = ["--host"]
    default = "0.0.0.0"

    [[tool.poe.tasks.app.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"

  [tool.poe.tasks.docs]
  help = "Generate this package's docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      alpaca_broker
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring style (default: numpy)"
    name = "docformat"
    options = ["--docformat"]
    default = "numpy"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"

  [tool.poe.tasks.lab]
  help = "Run Jupyter Lab"

    [[tool.poe.tasks.lab.sequence]]
    cmd = "mkdir -p notebooks"

    [[tool.poe.tasks.lab.sequence]]
    cmd = """
      jupyter lab
        --allow-root
        --notebook-dir notebooks
      """

  [tool.poe.tasks.lint]
  help = "Lint this package"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """

  [tool.poe.tasks.test]
  help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"

